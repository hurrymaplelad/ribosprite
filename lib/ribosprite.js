// Generated by CoffeeScript 1.7.1
var button, div, form, input, label, nameToLabel, normalizeArgs, prefixed, renderable, span, _ref;

_ref = require('teacup'), renderable = _ref.renderable, button = _ref.button, form = _ref.form, div = _ref.div, input = _ref.input, label = _ref.label, span = _ref.span, normalizeArgs = _ref.normalizeArgs;

nameToLabel = function(name) {
  return name.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/(^[a-z])/g, function(str, p1) {
    return p1.toUpperCase();
  });
};

prefixed = function(prefix) {
  var normalizeFieldArgs, normalizeHelperArgs, riboPrefixed, ribosprite, rvPrefixed, _prefixed;
  if (prefix == null) {
    prefix = '';
  }
  ribosprite = {};
  _prefixed = function(namespace) {
    if (prefix) {
      return function(action) {
        return [namespace, prefix, action].join('-');
      };
    } else {
      return function(action) {
        return "" + namespace + "-" + action;
      };
    }
  };
  rvPrefixed = _prefixed('rv');
  riboPrefixed = _prefixed('ribo');
  normalizeHelperArgs = function(args) {
    var attrs, contents, name, _ref1;
    _ref1 = normalizeArgs(args), attrs = _ref1.attrs, contents = _ref1.contents;
    name = attrs.name;
    delete attrs.name;
    return {
      attrs: attrs,
      contents: contents,
      name: name
    };
  };
  normalizeFieldArgs = function(args) {
    var attrs, contents, labelText, name, _ref1;
    _ref1 = normalizeArgs(args), attrs = _ref1.attrs, contents = _ref1.contents;
    delete attrs.label;
    name = attrs.name;
    delete attrs.name;
    labelText = attrs.label;
    if (name) {
      if (labelText == null) {
        labelText = nameToLabel(name);
      }
      if (attrs.id == null) {
        attrs.id = riboPrefixed(name);
      }
    }
    return {
      attrs: attrs,
      contents: contents,
      labelText: labelText,
      name: name
    };
  };
  ribosprite.helpText = function() {
    var attrs, contents, name, _ref1;
    _ref1 = normalizeHelperArgs(arguments), attrs = _ref1.attrs, contents = _ref1.contents, name = _ref1.name;
    attrs[rvPrefixed('text')] = "fieldErrors." + name;
    return span('.help-block', attrs);
  };
  ribosprite.formHelpText = function() {
    return div('.has-error', function() {
      var attrs;
      attrs = {};
      attrs[rvPrefixed('text')] = "formError";
      return span('.help-block', attrs);
    });
  };
  ribosprite.formGroup = function() {
    var attrs, contents, name, _ref1;
    _ref1 = normalizeHelperArgs(arguments), attrs = _ref1.attrs, contents = _ref1.contents, name = _ref1.name;
    attrs[rvPrefixed('class-has-error')] = "fieldErrors." + name;
    return div('.form-group', attrs, contents);
  };
  ribosprite.input = function() {
    var attrs, contents, labelText, name, _ref1;
    _ref1 = normalizeFieldArgs(arguments), attrs = _ref1.attrs, contents = _ref1.contents, name = _ref1.name, labelText = _ref1.labelText;
    attrs[rvPrefixed('value')] = "data." + name;
    return ribosprite.formGroup({
      name: name
    }, function() {
      label('.control-label', {
        "for": attrs.id
      }, labelText);
      input('.form-control', attrs);
      return ribosprite.helpText({
        name: name
      });
    });
  };
  ribosprite.form = function() {
    var attrs, contents, _ref1;
    _ref1 = normalizeArgs(arguments), attrs = _ref1.attrs, contents = _ref1.contents;
    attrs[rvPrefixed('on-submit')] = 'submit';
    return form(attrs, contents);
  };
  ribosprite.submit = function() {
    var attrs, contents, _ref1;
    _ref1 = normalizeArgs(arguments), attrs = _ref1.attrs, contents = _ref1.contents;
    attrs.type = 'submit';
    if (contents == null) {
      contents = 'Submit';
    }
    return button('.btn.btn-default', attrs, contents);
  };
  return ribosprite;
};

module.exports = prefixed();

module.exports.prefixed = prefixed;
