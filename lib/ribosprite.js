// Generated by CoffeeScript 1.7.1
var button, div, form, input, label, prefixed, renderable, span, _ref;

_ref = require('teacup'), renderable = _ref.renderable, button = _ref.button, form = _ref.form, div = _ref.div, input = _ref.input, label = _ref.label, span = _ref.span;

prefixed = function(prefix) {
  var ribosprite, rvPrefixed;
  if (prefix == null) {
    prefix = '';
  }
  ribosprite = {};
  rvPrefixed = (function() {
    switch (false) {
      case !prefix:
        return function(action) {
          return ['rv', prefix, action].join('-');
        };
      default:
        return function(action) {
          return "rv-" + action;
        };
    }
  })();
  ribosprite.helpText = function(field) {
    var attrs;
    attrs = {};
    attrs[rvPrefixed('text')] = "fieldErrors." + field.name;
    return span('.help-block', attrs);
  };
  ribosprite.formHelpText = function(form) {
    return div('.has-error', function() {
      var attrs;
      attrs = {};
      attrs[rvPrefixed('text')] = "formError";
      return span('.help-block', attrs);
    });
  };
  ribosprite.input = function(type) {
    return function(field) {
      var attrs, id, labelText, name;
      name = field.name, id = field.id, labelText = field.label;
      attrs = {};
      attrs[rvPrefixed('class-has-error')] = "fieldErrors." + name;
      return div('.form-group', attrs, function() {
        label('.control-label', {
          "for": id
        }, labelText);
        attrs = {
          id: id,
          type: type
        };
        attrs[rvPrefixed('value')] = "data." + name;
        input('.form-control', attrs);
        return ribosprite.helpText(field);
      });
    };
  };
  ribosprite.text = ribosprite.input('text');
  ribosprite.form = function(body) {
    var attrs;
    attrs = {};
    attrs[rvPrefixed('on-submit')] = 'submit';
    return form(attrs, body);
  };
  ribosprite.submit = function(buttonText) {
    if (buttonText == null) {
      buttonText = 'Submit';
    }
    return button('.btn.btn-default', {
      type: 'submit'
    }, buttonText);
  };
  return ribosprite;
};

module.exports = prefixed();

module.exports.prefixed = prefixed;
